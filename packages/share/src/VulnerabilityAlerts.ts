import { graphql } from "@octokit/graphql";

export type fetchVulnerabilityAlertsOptions = {
    token: string;
    owner: string;
    repo: string;
};

export type VulnerabilityAlertNode = {
    id: string;
    vulnerableManifestFilename: string;
    vulnerableManifestPath: string;
    vulnerableRequirements: string;
    dismissReason: string | null;
    dismissedAt: string | null;
    dismisser: {
        login: string;
    } | null;
    securityAdvisory: {
        description: string;
        ghsaId: string;
        severity: string;
        summary: string;
        identifiers: { id: string; value: string }[];
        references: { url: string }[];
    };
    securityVulnerability: {
        firstPatchedVersion?: {
            identifier: string;
        };
        vulnerableVersionRange: string;
        severity: string;
        package: {
            name: string;
            ecosystem: string;
        };
    };
};

export async function fetchVulnerabilityAlerts(
    options: fetchVulnerabilityAlertsOptions
): Promise<VulnerabilityAlertNode[]> {
    // https://developer.github.com/v4/object/repository/#connections
    const { repository } = await graphql<{
        repository: {
            vulnerabilityAlerts: {
                edges: {
                    node: VulnerabilityAlertNode;
                }[];
            };
        };
    }>(
        `
            query vulnerabilityAlerts($owner: String!, $repo: String!) {
                repository(owner: $owner, name: $repo) {
                    vulnerabilityAlerts(first: 100) {
                        edges {
                            node {
                                id
                                vulnerableManifestFilename
                                vulnerableManifestPath
                                vulnerableRequirements
                                dismissReason
                                dismissedAt
                                dismisser {
                                    login
                                }
                                securityAdvisory {
                                    ghsaId
                                    description
                                    severity
                                    summary
                                    identifiers {
                                        type
                                        value
                                    }
                                    references {
                                        url
                                    }
                                }
                                securityVulnerability {
                                    firstPatchedVersion {
                                        identifier
                                    }
                                    vulnerableVersionRange
                                    severity
                                    package {
                                        name
                                        ecosystem
                                    }
                                }
                            }
                        }
                    }
                }
            }
        `,
        {
            owner: options.owner,
            repo: options.repo,
            headers: {
                authorization: `token ${options.token}`,
                accept: "application/vnd.github.vixen-preview+json"
            }
        }
    );
    return repository.vulnerabilityAlerts.edges.map((edge: any) => {
        return edge.node;
    });
}
